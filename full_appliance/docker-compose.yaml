services:
  # Dependencies
  minio:
    image: ${REGISTRY}minio/minio
    environment:
      MINIO_ROOT_USER: al_storage_key
      MINIO_ROOT_PASSWORD: "${FILESTORE_PASSWORD}"
    command: server /data
    networks: [core]
    volumes:
    - filestore:/data
    restart: on-failure

  kb_setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.2
    environment:
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - KIBANA_PASSWORD=${KIBANA_PASSWORD}
      - KIBANA_USERNAME=${KIBANA_USERNAME}
    command: >
      bash -c '
        until curl  http://elastic:$$ELASTIC_PASSWORD@elasticsearch:9200 | grep -q "You Know, for Search"; do sleep 2; echo "Elastic not ready"; done;
        curl -q -X POST -H "Content-Type: application/json" http://elastic:$$ELASTIC_PASSWORD@elasticsearch:9200/_security/user/$$KIBANA_USERNAME/_password -d "{\"password\":\"$$KIBANA_PASSWORD\"}";
      '
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks: [core]


  kibana:
    image: ${REGISTRY}docker.elastic.co/kibana/kibana:8.10.2
    environment:
      SERVER_NAME: localhost
      ELASTIC_HOSTS: http://elasticsearch:9200
      ELASTIC_USERNAME: elastic
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
      KIBANA_PASSWORD: ${KIBANA_PASSWORD}
      KIBANA_USERNAME: ${KIBANA_USERNAME}
    depends_on:
      elasticsearch:
        condition: service_healthy
      kb_setup:
        condition: service_completed_successfully
    volumes:
      - ${COMPOSE_ROOT}/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro
    healthcheck:
      test: ["CMD-SHELL", "curl --silent --fail -u elastic:$$ELASTIC_PASSWORD http://localhost:5601/kibana"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks: [core]
    restart: on-failure

  apm_server:
    image: ${REGISTRY}docker.elastic.co/apm/apm-server:8.10.2
    volumes:
      - ${COMPOSE_ROOT}/config/apm-server.yml:/usr/share/apm-server/apm-server.yml:ro
    environment:
      ELASTIC_HOSTS: http://elasticsearch:9200
      ELASTIC_USERNAME: elastic
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
      KIBANA_PASSWORD: ${KIBANA_PASSWORD}
      KIBANA_USERNAME: ${KIBANA_USERNAME}
    command: /bin/bash -c "/usr/local/bin/docker-entrypoint -e -strict.perms=false"
    depends_on:
      elasticsearch:
        condition: service_healthy
      kibana:
        condition: service_healthy
    networks:
      core: {}
    restart: on-failure

  elasticsearch:
    image: ${REGISTRY}docker.elastic.co/elasticsearch/elasticsearch:8.10.2
    environment:
      - ingest.geoip.downloader.enabled=false
      - xpack.security.enabled=true
      - discovery.type=single-node
      - logger.level=WARN
      - "ELASTIC_PASSWORD=${ELASTIC_PASSWORD}"
      - "ES_JAVA_OPTS=-Xms${ELASTIC_MEM}m -Xmx${ELASTIC_MEM}m -Dlog4j2.formatMsgNoLookups=true"
      - "cluster.routing.allocation.disk.watermark.low=10gb"
      - "cluster.routing.allocation.disk.watermark.high=5gb"
      - "cluster.routing.allocation.disk.watermark.flood_stage=1gb"
    healthcheck:
        test: ["CMD-SHELL", "curl --silent --fail -u elastic:${ELASTIC_PASSWORD} localhost:9200/_cluster/health || exit 1"]
        interval: 30s
        timeout: 30s
        retries: 3
    networks: [core]
    volumes:
      - datastore:/usr/share/elasticsearch/data
    restart: on-failure

  filebeat:
    image: ${REGISTRY}docker.elastic.co/beats/filebeat:8.10.2
    user: root
    environment:
      ELASTIC_HOSTS: http://elasticsearch:9200
      ELASTIC_USERNAME: elastic
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ${COMPOSE_ROOT}/config/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - ${COMPOSE_ROOT}/config/filebeat_policy.json:/usr/share/filebeat/filebeat_policy.json:ro
    command: filebeat -e -strict.perms=false
    depends_on:
      elasticsearch:
        condition: service_healthy
      kibana:
        condition: service_healthy
    networks: [core]
    restart: on-failure

  metricbeat:
    image: ${REGISTRY}docker.elastic.co/beats/metricbeat:8.10.2
    user: root
    environment:
      ELASTIC_HOSTS: http://elasticsearch:9200
      ELASTIC_USERNAME: elastic
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ${COMPOSE_ROOT}/config/metricbeat.yml:/usr/share/metricbeat/metricbeat.yml:ro
      - ${COMPOSE_ROOT}/config/metricbeat_policy.json:/usr/share/metricbeat/metricbeat_policy.json:ro
    command: metricbeat -e --strict.perms=false
    depends_on:
      elasticsearch:
        condition: service_healthy
      kibana:
        condition: service_healthy
    networks: [core]
    restart: on-failure

  redis:
    image: ${REGISTRY}redis
    healthcheck:
      test: ["CMD", "redis-cli","ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - redis:/data
    command: redis-server --io-threads 2
    restart: on-failure
    networks: [core]

  nginx:
    image: ${REGISTRY}cccs/nginx-ssl-frontend
    ports:
      - '443:443'
    environment:
      - DOLLAR=$$
      - UI_HOST=ui
      - SOCKET_HOST=socketio
      - FRONTEND_HOST=frontend
      - FQDN=${DOMAIN}
      - MAX_BODY_SIZE=100M
    volumes:
      - ${COMPOSE_ROOT}/config/nginx.crt:/etc/ssl/nginx.crt:ro
      - ${COMPOSE_ROOT}/config/nginx.key:/etc/ssl/nginx.key:ro
    networks:
      - core
      - external
    restart: on-failure
    depends_on:
      kibana:
        condition: service_started
      socketio:
        condition: service_started
      ui:
        condition: service_started

  # Start the core services
  # Alerter
  alerter:
    image: ${REGISTRY}cccs/assemblyline-core:${AL_VERSION}
    env_file: [".env"]
    volumes:
      - ${COMPOSE_ROOT}/config/config.yml:/etc/assemblyline/config.yml:ro
    networks: [core]
    restart: on-failure
    command: python -m assemblyline_core.alerter.run_alerter
    healthcheck:
      test: ["CMD", "bash", "-c", "if [[ ! `find /tmp/heartbeat -newermt '-30 seconds'` ]]; then false; fi"]
    depends_on:
      elasticsearch:
        condition: service_healthy

  # Archiver
  archiver:
    image: ${REGISTRY}cccs/assemblyline-core:${AL_VERSION}
    env_file: [".env"]
    volumes:
      - ${COMPOSE_ROOT}/config/config.yml:/etc/assemblyline/config.yml:ro
    networks: [core]
    restart: on-failure
    command: python -m assemblyline_core.archiver.run_archiver
    healthcheck:
      test: ["CMD", "bash", "-c", "if [[ ! `find /tmp/heartbeat -newermt '-30 seconds'` ]]; then false; fi"]
    depends_on:
      elasticsearch:
        condition: service_healthy

  # Expiry
  expiry:
    image: ${REGISTRY}cccs/assemblyline-core:${AL_VERSION}
    env_file: [".env"]
    volumes:
      - ${COMPOSE_ROOT}/config/config.yml:/etc/assemblyline/config.yml:ro
    networks: [core]
    restart: on-failure
    command: python -m assemblyline_core.expiry.run_expiry
    healthcheck:
      test: ["CMD", "bash", "-c", "if [[ ! `find /tmp/heartbeat -newermt '-30 seconds'` ]]; then false; fi"]
    depends_on:
      elasticsearch:
        condition: service_healthy

  # Metrics aggregator
  metrics:
    image: ${REGISTRY}cccs/assemblyline-core:${AL_VERSION}
    env_file: [".env"]
    volumes:
      - ${COMPOSE_ROOT}/config/config.yml:/etc/assemblyline/config.yml:ro
    networks: [core]
    restart: on-failure
    command: python -m assemblyline_core.metrics.run_metrics_aggregator
    depends_on:
      elasticsearch:
        condition: service_healthy

  # Heartbeat manager
  heartbeat:
    image: ${REGISTRY}cccs/assemblyline-core:${AL_VERSION}
    env_file: [".env"]
    volumes:
      - ${COMPOSE_ROOT}/config/config.yml:/etc/assemblyline/config.yml:ro
    networks: [core]
    restart: on-failure
    command: python -m assemblyline_core.metrics.run_heartbeat_manager
    healthcheck:
      test: ["CMD", "bash", "-c", "if [[ ! `find /tmp/heartbeat -newermt '-30 seconds'` ]]; then false; fi"]
    depends_on:
      elasticsearch:
        condition: service_healthy

  # Plumber
  plumber:
    image: ${REGISTRY}cccs/assemblyline-core:${AL_VERSION}
    env_file: [".env"]
    volumes:
      - ${COMPOSE_ROOT}/config/config.yml:/etc/assemblyline/config.yml:ro
    networks: [core]
    restart: on-failure
    command: python -m assemblyline_core.plumber.run_plumber
    healthcheck:
      test: ["CMD", "bash", "-c", "if [[ ! `find /tmp/heartbeat -newermt '-30 seconds'` ]]; then false; fi"]
    depends_on:
      elasticsearch:
        condition: service_healthy

  # Statistics aggregator
  statistics:
    image: ${REGISTRY}cccs/assemblyline-core:${AL_VERSION}
    env_file: [".env"]
    volumes:
      - ${COMPOSE_ROOT}/config/config.yml:/etc/assemblyline/config.yml:ro
    networks: [core]
    restart: on-failure
    command: python -m assemblyline_core.metrics.run_statistics_aggregator
    depends_on:
      elasticsearch:
        condition: service_healthy

  # Workflow
  workflow:
    image: ${REGISTRY}cccs/assemblyline-core:${AL_VERSION}
    env_file: [".env"]
    volumes:
      - ${COMPOSE_ROOT}/config/config.yml:/etc/assemblyline/config.yml:ro
    networks: [core]
    restart: on-failure
    command: python -m assemblyline_core.workflow.run_workflow
    healthcheck:
      test: ["CMD", "bash", "-c", "if [[ ! `find /tmp/heartbeat -newermt '-30 seconds'` ]]; then false; fi"]
    depends_on:
      elasticsearch:
        condition: service_healthy

  # Scaler
  scaler:
    build:
      context: privilege-core-image
      args:
        version: ${AL_VERSION}
        registry: ${REGISTRY}
      cache_from:
        - cccs/assemblyline-core:${AL_VERSION}
    image: ${COMPOSE_PROJECT_NAME}_scaler:${AL_VERSION}
    privileged: true
    env_file: [".env"]
    environment:
      DOCKER_CONFIGURATION_PATH: /mount/service_config
      DOCKER_CONFIGURATION_VOLUME: ${COMPOSE_PROJECT_NAME}_service_config
      AL_CORE_NETWORK: ${COMPOSE_PROJECT_NAME}_core
      SERVICE_API_HOST: http://service-server:5003
    volumes:
      - service_config:/mount/service_config:rw
      - ${COMPOSE_ROOT}/config/config.yml:/etc/assemblyline/config.yml:ro
      - /var/run/docker.sock:/var/run/docker.sock  # NOTE, this container has access to docker socket (this is like root)
    networks: [core]
    restart: on-failure
    command: python -m assemblyline_core.scaler.run_scaler
    healthcheck:
      test: ["CMD", "bash", "-c", "if [[ ! `find /tmp/heartbeat -newermt '-30 seconds'` ]]; then false; fi"]
    depends_on:
      elasticsearch:
        condition: service_healthy

  # Updater
  updater:
    build:
      context: privilege-core-image
      args:
        version: ${AL_VERSION}
        registry: ${REGISTRY}
      cache_from:
        - cccs/assemblyline-core:${AL_VERSION}
    image: ${COMPOSE_PROJECT_NAME}_updater:${AL_VERSION}
    privileged: true
    env_file: [".env"]
    environment:
      AL_CORE_NETWORK: ${COMPOSE_PROJECT_NAME}_core
      CONFIGURATION_HOST_PATH: ${COMPOSE_PROJECT_NAME}_service_config
      SERVICE_API_HOST: http://service-server:5003
    volumes:
      - ${COMPOSE_ROOT}/config/config.yml:/etc/assemblyline/config.yml:ro
      - /var/run/docker.sock:/var/run/docker.sock  # NOTE, this container has access to docker socket (this is like root)
    command: python3 -m assemblyline_core.updater.run_updater
    networks: [core, external]
    restart: on-failure
    healthcheck:
      test: ["CMD", "bash", "-c", "if [[ ! `find /tmp/heartbeat -newermt '-30 seconds'` ]]; then false; fi"]
    depends_on:
      elasticsearch:
        condition: service_healthy

  # Dispatcher
  dispatcher:
    image: ${REGISTRY}cccs/assemblyline-core:${AL_VERSION}
    env_file: [".env"]
    volumes:
      - ${COMPOSE_ROOT}/config/config.yml:/etc/assemblyline/config.yml:ro
    networks: [core]
    restart: on-failure
    command: python -m assemblyline_core.dispatching
    healthcheck:
      test: ["CMD", "bash", "-c", "if [[ ! `find /tmp/heartbeat -newermt '-30 seconds'` ]]; then false; fi"]
    depends_on:
      elasticsearch:
        condition: service_healthy

  # Ingester Processes
  ingester:
    image: ${REGISTRY}cccs/assemblyline-core:${AL_VERSION}
    env_file: [".env"]
    volumes:
      - ${COMPOSE_ROOT}/config/config.yml:/etc/assemblyline/config.yml:ro
    networks: [core]
    restart: on-failure
    command: python -m assemblyline_core.ingester
    healthcheck:
      test: ["CMD", "bash", "-c", "if [[ ! `find /tmp/heartbeat -newermt '-30 seconds'` ]]; then false; fi"]
    depends_on:
      elasticsearch:
        condition: service_healthy

  # Service server
  service_server:
    image: ${REGISTRY}cccs/assemblyline-service-server:${AL_VERSION}
    volumes:
      - ${COMPOSE_ROOT}/config/config.yml:/etc/assemblyline/config.yml:ro
    networks:
      - core
      - registration
    env_file: [".env"]
    environment:
      SERVICE_API_KEY: ${SERVICE_API_KEY}
    restart: on-failure
    depends_on:
      elasticsearch:
        condition: service_healthy
      redis:
        condition: service_started

  # UI
  ui:
    image: ${REGISTRY}cccs/assemblyline-ui:${AL_VERSION}
    env_file: [".env"]
    volumes:
      - ${COMPOSE_ROOT}/config/config.yml:/etc/assemblyline/config.yml:ro
    networks: [core, external]
    restart: on-failure
    depends_on:
      elasticsearch:
        condition: service_healthy

  # SocketIO Server
  socketio:
    image: ${REGISTRY}cccs/assemblyline-socketio:${AL_VERSION}
    env_file: [".env"]
    volumes:
      - ${COMPOSE_ROOT}/config/config.yml:/etc/assemblyline/config.yml:ro
    networks: [core]
    restart: on-failure
    depends_on:
      elasticsearch:
        condition: service_healthy

  # Assemblyline Frontend
  frontend:
    image: ${REGISTRY}cccs/assemblyline-ui-frontend:${AL_VERSION}
    env_file: [".env"]
    networks: [core]
    restart: on-failure

networks:
  core:
    internal: true
  external:
    internal: false
  registration:
    internal: true

volumes:
  datastore:
  filestore:
  redis:
  service_config:
