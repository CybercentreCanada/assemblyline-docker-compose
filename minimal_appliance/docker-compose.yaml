version: '2.4'

services:
  # Dependancies
  minio:
    image: ${REGISTRY}minio/minio
    environment:
      MINIO_ACCESS_KEY: al_storage_key
      MINIO_SECRET_KEY: "${FILESTORE_PASSWORD}"
    command: server /data
    networks: [core]
    volumes:
    - filestore:/data
    restart: on-failure

  elasticsearch:
    image: ${REGISTRY}docker.elastic.co/elasticsearch/elasticsearch:7.8.0
    environment:
      - xpack.security.enabled=true
      - discovery.type=single-node
      - logger.level=WARN
      - "ELASTIC_PASSWORD=${ELASTIC_PASSWORD}"
      - "ES_JAVA_OPTS=-Xms512m -Xmx${ELASTIC_MAX_MEM}m"
    healthcheck:
        test: ["CMD-SHELL", "curl --silent --fail -u elastic:${ELASTIC_PASSWORD} localhost:9200/_cluster/health || exit 1"]
        interval: 30s
        timeout: 30s
        retries: 3
    networks: [core]
    volumes:
      - datastore:/usr/share/elasticsearch/data
    restart: on-failure

  redis:
    image: ${REGISTRY}redis
    healthcheck:
      test: ["CMD", "redis-cli","ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: on-failure
    networks: [core]

  nginx:
    image: ${REGISTRY}cccs/nginx-ssl-frontend
    ports:
      - '443:443'
    environment:
      - DOLLAR=$$
      - UI_HOST=al_ui
      - SOCKET_HOST=al_socketio
      - FRONTEND_HOST=al_ui_frontend
      - FQDN=${DOMAIN}
      - MAX_BODY_SIZE=100M
      - TEMPLATE=minimal
    volumes:
      - ${COMPOSE_ROOT}/config/nginx.crt:/etc/ssl/nginx.crt:ro
      - ${COMPOSE_ROOT}/config/nginx.key:/etc/ssl/nginx.key:ro
    networks:
      - core
      - external
    restart: on-failure    
    depends_on:
      al_socketio:
        condition: service_started
      al_ui:
        condition: service_started


  # Start the core services
  # Alerter
  al_alerter:
    image: ${REGISTRY}cccs/assemblyline-core:${CORE_VERSION}
    env_file: [".env"]
    volumes:
      - ${COMPOSE_ROOT}/config/config.yml:/etc/assemblyline/config.yml:ro
    networks: [core]
    restart: on-failure
    command: python -m assemblyline_core.alerter.run_alerter
    healthcheck:
      test: ["CMD", "bash", "-c", "if [[ ! `find /tmp/heartbeat -newermt '-30 seconds'` ]]; then false; fi"]
    depends_on:
      elasticsearch:
        condition: service_healthy

  # Expiry
  al_expiry:
    image: ${REGISTRY}cccs/assemblyline-core:${CORE_VERSION}
    env_file: [".env"]
    volumes:
      - ${COMPOSE_ROOT}/config/config.yml:/etc/assemblyline/config.yml:ro
    networks: [core]
    restart: on-failure
    command: python -m assemblyline_core.expiry.run_expiry
    healthcheck:
      test: ["CMD", "bash", "-c", "if [[ ! `find /tmp/heartbeat -newermt '-30 seconds'` ]]; then false; fi"]
    depends_on:
      elasticsearch:
        condition: service_healthy

  # Hearbeat manager
  al_heartbeat:
    image: ${REGISTRY}cccs/assemblyline-core:${CORE_VERSION}
    env_file: [".env"]
    volumes:
      - ${COMPOSE_ROOT}/config/config.yml:/etc/assemblyline/config.yml:ro
    networks: [core]
    restart: on-failure
    command: python -m assemblyline_core.metrics.run_heartbeat_manager
    healthcheck:
      test: ["CMD", "bash", "-c", "if [[ ! `find /tmp/heartbeat -newermt '-30 seconds'` ]]; then false; fi"]
    depends_on:
      elasticsearch:
        condition: service_healthy

  # Workflow
  al_workflow:
    image: ${REGISTRY}cccs/assemblyline-core:${CORE_VERSION}
    env_file: [".env"]
    volumes:
      - ${COMPOSE_ROOT}/config/config.yml:/etc/assemblyline/config.yml:ro
    networks: [core]
    restart: on-failure
    command: python -m assemblyline_core.workflow.run_workflow
    healthcheck:
      test: ["CMD", "bash", "-c", "if [[ ! `find /tmp/heartbeat -newermt '-30 seconds'` ]]; then false; fi"]
    depends_on:
      elasticsearch:
        condition: service_healthy

  al_scaler:
    build:
      context: privilege-core-image
      args:
        version: ${CORE_VERSION}
        registry: ${REGISTRY}
      cache_from:
        - cccs/assemblyline-core:${CORE_VERSION}
    privileged: true
    env_file: [".env"]
    environment:
      FILE_UPDATE_VOLUME: ${UPDATE_DATA_PATH}
      FILE_UPDATE_DIRECTORY: /mount/update_root/
    volumes:
      - ${UPDATE_DATA_PATH}:/mount/update_root/
      - ${COMPOSE_ROOT}/config/config.yml:/etc/assemblyline/config.yml:ro
      - /var/run/docker.sock:/var/run/docker.sock  # NOTE, this container has access to docker socket (this is like root)
    networks: [core]
    restart: on-failure
    command: python -m assemblyline_core.scaler.run_scaler
    healthcheck:
      test: ["CMD", "bash", "-c", "if [[ ! `find /tmp/heartbeat -newermt '-30 seconds'` ]]; then false; fi"]
    depends_on:
      elasticsearch:
        condition: service_healthy

  al_updater:
    build:
      context: privilege-core-image
      args:
        version: ${CORE_VERSION}
        registry: ${REGISTRY}
      cache_from:
        - cccs/assemblyline-core:${CORE_VERSION}
    privileged: true
    env_file: [".env"]
    environment:
      FILE_UPDATE_VOLUME: ${UPDATE_DATA_PATH}
      FILE_UPDATE_DIRECTORY: /mount/update_root/
    volumes:
      - ${UPDATE_DATA_PATH}:/mount/update_root/
      - ${COMPOSE_ROOT}/config/config.yml:/etc/assemblyline/config.yml:ro
      - /var/run/docker.sock:/var/run/docker.sock  # NOTE, this container has access to docker socket (this is like root)
    command: python3 -m assemblyline_core.updater.run_updater
    networks: [core, external]
    restart: on-failure
    healthcheck:
      test: ["CMD", "bash", "-c", "if [[ ! `find /tmp/heartbeat -newermt '-30 seconds'` ]]; then false; fi"]
    depends_on:
      elasticsearch:
        condition: service_healthy

  al_dispatcher:
    image: ${REGISTRY}cccs/assemblyline-core:${CORE_VERSION}
    env_file: [".env"]
    volumes:
      - ${COMPOSE_ROOT}/config/config.yml:/etc/assemblyline/config.yml:ro
    networks: [core]
    restart: on-failure
    command: python -m assemblyline_core.dispatching
    healthcheck:
      test: ["CMD", "bash", "-c", "if [[ ! `find /tmp/heartbeat -newermt '-30 seconds'` ]]; then false; fi"]
    depends_on:
      elasticsearch:
        condition: service_healthy

  # Ingester Processes
  al_ingester_ingest:
    image: ${REGISTRY}cccs/assemblyline-core:${CORE_VERSION}
    env_file: [".env"]
    volumes:
      - ${COMPOSE_ROOT}/config/config.yml:/etc/assemblyline/config.yml:ro
    networks: [core]
    restart: on-failure
    command: python -m assemblyline_core.ingester.run_ingest
    healthcheck:
      test: ["CMD", "bash", "-c", "if [[ ! `find /tmp/heartbeat -newermt '-30 seconds'` ]]; then false; fi"]
    depends_on:
      elasticsearch:
        condition: service_healthy

  al_ingester_internal:
    image: ${REGISTRY}cccs/assemblyline-core:${CORE_VERSION}
    env_file: [".env"]
    volumes:
      - ${COMPOSE_ROOT}/config/config.yml:/etc/assemblyline/config.yml:ro
    networks: [core]
    restart: on-failure
    command: python -m assemblyline_core.ingester.run_internal
    healthcheck:
      test: ["CMD", "bash", "-c", "if [[ ! `find /tmp/heartbeat -newermt '-30 seconds'` ]]; then false; fi"]
    depends_on:
      elasticsearch:
        condition: service_healthy

  al_ingester_submit:
    image: ${REGISTRY}cccs/assemblyline-core:${CORE_VERSION}
    env_file: [".env"]
    volumes:
      - ${COMPOSE_ROOT}/config/config.yml:/etc/assemblyline/config.yml:ro
    networks: [core]
    restart: on-failure
    command: python -m assemblyline_core.ingester.run_submit
    healthcheck:
      test: ["CMD", "bash", "-c", "if [[ ! `find /tmp/heartbeat -newermt '-30 seconds'` ]]; then false; fi"]
    depends_on:
      elasticsearch:
        condition: service_healthy

  # Service server
  al_service_server:
    image: ${REGISTRY}cccs/assemblyline-service-server:${SERVICE_SERVER_VERSION}
    volumes:
      - ${COMPOSE_ROOT}/config/config.yml:/etc/assemblyline/config.yml:ro
    networks:
      - core
      - registration
    depends_on:
      elasticsearch:
        condition: service_healthy
      redis:
        condition: service_started
    env_file: [".env"]
    environment:
      SERVICE_API_AUTH_KEY: ${SERVICE_API_KEY}
    restart: on-failure
    
  # UI
  al_ui:
    image: ${REGISTRY}cccs/assemblyline-ui:${UI_VERSION}
    env_file: [".env"]
    volumes:
      - ${COMPOSE_ROOT}/config/config.yml:/etc/assemblyline/config.yml:ro
    networks: [core, external]
    restart: on-failure
    depends_on:
      elasticsearch:
        condition: service_healthy

  # SocketIO Server
  al_socketio:
    image: ${REGISTRY}cccs/assemblyline-socketio:${UI_VERSION}
    env_file: [".env"]
    volumes:
      - ${COMPOSE_ROOT}/config/config.yml:/etc/assemblyline/config.yml:ro
    networks: [core]
    restart: on-failure
    depends_on:
      elasticsearch:
        condition: service_healthy

  # Assemblyline Frontend
  al_ui_frontend:
    image: ${REGISTRY}cccs/assemblyline-ui-frontend:${UI_FRONTEND_VERSION}
    env_file: [".env"]
    networks: [core]
    restart: on-failure

networks:
  core:
    name: al_core
    internal: true
  external:
    internal: false
  registration:
    name: al_registration
    internal: true

volumes:
  filestore:
  datastore:
