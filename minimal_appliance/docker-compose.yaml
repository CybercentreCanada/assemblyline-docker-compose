services:
  # Dependencies
  minio:
    image: ${REGISTRY}minio/minio
    environment:
      MINIO_ROOT_USER: al_storage_key
      MINIO_ROOT_PASSWORD: "${FILESTORE_PASSWORD}"
    command: server /data
    networks: [core]
    volumes:
    - filestore:/data
    restart: on-failure

  elasticsearch:
    image: ${REGISTRY:-docker.elastic.co}/elasticsearch/elasticsearch:8.10.2
    environment:
      - ingest.geoip.downloader.enabled=false
      - xpack.security.enabled=true
      - discovery.type=single-node
      - logger.level=WARN
      - "ELASTIC_PASSWORD=${ELASTIC_PASSWORD}"
      - "ES_JAVA_OPTS=-Xms${ELASTIC_MEM}m -Xmx${ELASTIC_MEM}m -Dlog4j2.formatMsgNoLookups=true"
    healthcheck:
        test: ["CMD-SHELL", "curl --silent --fail -u elastic:${ELASTIC_PASSWORD} localhost:9200/_cluster/health || exit 1"]
        interval: 30s
        timeout: 30s
        retries: 3
    networks: [core]
    volumes:
      - datastore:/usr/share/elasticsearch/data
    restart: on-failure

  redis:
    image: ${REGISTRY}redis
    healthcheck:
      test: ["CMD", "redis-cli","ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - redis:/data
    command: redis-server --io-threads 2
    restart: on-failure
    networks: [core]

  nginx:
    image: ${REGISTRY}cccs/nginx-ssl-frontend
    ports:
      - '443:443'
    environment:
      - DOLLAR=$$
      - UI_HOST=ui
      - SOCKET_HOST=socketio
      - FRONTEND_HOST=frontend
      - FQDN=${DOMAIN}
      - MAX_BODY_SIZE=100M
      - TEMPLATE=minimal
    volumes:
      - ${COMPOSE_ROOT}/config/nginx.crt:/etc/ssl/nginx.crt:ro
      - ${COMPOSE_ROOT}/config/nginx.key:/etc/ssl/nginx.key:ro
    networks:
      - core
      - external
    restart: on-failure
    depends_on:
      socketio:
        condition: service_started
      ui:
        condition: service_started

  # Start the core services
  # Alerter
  alerter:
    image: ${REGISTRY}cccs/assemblyline-core:${AL_VERSION}
    env_file: [".env"]
    volumes:
      - ${COMPOSE_ROOT}/config/config.yml:/etc/assemblyline/config.yml:ro
    networks: [core]
    restart: on-failure
    command: python -m assemblyline_core.alerter.run_alerter
    healthcheck:
      test: ["CMD", "bash", "-c", "if [[ ! `find /tmp/heartbeat -newermt '-30 seconds'` ]]; then false; fi"]
    depends_on:
      elasticsearch:
        condition: service_healthy

  # Archiver
  archiver:
    image: ${REGISTRY}cccs/assemblyline-core:${AL_VERSION}
    env_file: [".env"]
    volumes:
      - ${COMPOSE_ROOT}/config/config.yml:/etc/assemblyline/config.yml:ro
    networks: [core]
    restart: on-failure
    command: python -m assemblyline_core.archiver.run_archiver
    healthcheck:
      test: ["CMD", "bash", "-c", "if [[ ! `find /tmp/heartbeat -newermt '-30 seconds'` ]]; then false; fi"]
    depends_on:
      elasticsearch:
        condition: service_healthy

  # Expiry
  expiry:
    image: ${REGISTRY}cccs/assemblyline-core:${AL_VERSION}
    env_file: [".env"]
    volumes:
      - ${COMPOSE_ROOT}/config/config.yml:/etc/assemblyline/config.yml:ro
    networks: [core]
    restart: on-failure
    command: python -m assemblyline_core.expiry.run_expiry
    healthcheck:
      test: ["CMD", "bash", "-c", "if [[ ! `find /tmp/heartbeat -newermt '-30 seconds'` ]]; then false; fi"]
    depends_on:
      elasticsearch:
        condition: service_healthy

  # Heartbeat manager
  heartbeat:
    image: ${REGISTRY}cccs/assemblyline-core:${AL_VERSION}
    env_file: [".env"]
    volumes:
      - ${COMPOSE_ROOT}/config/config.yml:/etc/assemblyline/config.yml:ro
    networks: [core]
    restart: on-failure
    command: python -m assemblyline_core.metrics.run_heartbeat_manager
    healthcheck:
      test: ["CMD", "bash", "-c", "if [[ ! `find /tmp/heartbeat -newermt '-30 seconds'` ]]; then false; fi"]
    depends_on:
      elasticsearch:
        condition: service_healthy

  # Plumber
  plumber:
    image: ${REGISTRY}cccs/assemblyline-core:${AL_VERSION}
    env_file: [".env"]
    volumes:
      - ${COMPOSE_ROOT}/config/config.yml:/etc/assemblyline/config.yml:ro
    networks: [core]
    restart: on-failure
    command: python -m assemblyline_core.plumber.run_plumber
    healthcheck:
      test: ["CMD", "bash", "-c", "if [[ ! `find /tmp/heartbeat -newermt '-30 seconds'` ]]; then false; fi"]
    depends_on:
      elasticsearch:
        condition: service_healthy

  # Statistics aggregator
  statistics:
    image: ${REGISTRY}cccs/assemblyline-core:${AL_VERSION}
    env_file: [".env"]
    volumes:
      - ${COMPOSE_ROOT}/config/config.yml:/etc/assemblyline/config.yml:ro
    networks: [core]
    restart: on-failure
    command: python -m assemblyline_core.metrics.run_statistics_aggregator
    depends_on:
      elasticsearch:
        condition: service_healthy

  # Workflow
  workflow:
    image: ${REGISTRY}cccs/assemblyline-core:${AL_VERSION}
    env_file: [".env"]
    volumes:
      - ${COMPOSE_ROOT}/config/config.yml:/etc/assemblyline/config.yml:ro
    networks: [core]
    restart: on-failure
    command: python -m assemblyline_core.workflow.run_workflow
    healthcheck:
      test: ["CMD", "bash", "-c", "if [[ ! `find /tmp/heartbeat -newermt '-30 seconds'` ]]; then false; fi"]
    depends_on:
      elasticsearch:
        condition: service_healthy

  # Scaler
  scaler:
    build:
      context: privilege-core-image
      args:
        version: ${AL_VERSION}
        registry: ${REGISTRY}
      cache_from:
        - ${REGISTRY}cccs/assemblyline-core:${AL_VERSION}
    image: ${COMPOSE_PROJECT_NAME}_scaler:${AL_VERSION}
    privileged: true
    env_file: [".env"]
    environment:
      DOCKER_CONFIGURATION_PATH: /mount/service_config
      DOCKER_CONFIGURATION_VOLUME: ${COMPOSE_PROJECT_NAME}_service_config
      AL_CORE_NETWORK: ${COMPOSE_PROJECT_NAME}_core
      SERVICE_API_HOST: http://service-server:5003
    volumes:
      - service_config:/mount/service_config:rw
      - ${COMPOSE_ROOT}/config/config.yml:/etc/assemblyline/config.yml:ro
      - /var/run/docker.sock:/var/run/docker.sock  # NOTE, this container has access to docker socket (this is like root)
    networks: [core]
    restart: on-failure
    command: python -m assemblyline_core.scaler.run_scaler
    healthcheck:
      test: ["CMD", "bash", "-c", "if [[ ! `find /tmp/heartbeat -newermt '-30 seconds'` ]]; then false; fi"]
    depends_on:
      elasticsearch:
        condition: service_healthy

  # Updater
  updater:
    build:
      context: privilege-core-image
      args:
        version: ${AL_VERSION}
        registry: ${REGISTRY}
      cache_from:
        - ${REGISTRY}cccs/assemblyline-core:${AL_VERSION}
    image: ${COMPOSE_PROJECT_NAME}_updater:${AL_VERSION}
    privileged: true
    env_file: [".env"]
    environment:
      AL_CORE_NETWORK: ${COMPOSE_PROJECT_NAME}_core
      CONFIGURATION_HOST_PATH: ${COMPOSE_PROJECT_NAME}_service_config
      SERVICE_API_HOST: http://service-server:5003
    volumes:
      - ${COMPOSE_ROOT}/config/config.yml:/etc/assemblyline/config.yml:ro
      - /var/run/docker.sock:/var/run/docker.sock  # NOTE, this container has access to docker socket (this is like root)
    command: python3 -m assemblyline_core.updater.run_updater
    networks: [core, external]
    restart: on-failure
    healthcheck:
      test: ["CMD", "bash", "-c", "if [[ ! `find /tmp/heartbeat -newermt '-30 seconds'` ]]; then false; fi"]
    depends_on:
      elasticsearch:
        condition: service_healthy

  # Dispatcher
  dispatcher:
    image: ${REGISTRY}cccs/assemblyline-core:${AL_VERSION}
    env_file: [".env"]
    volumes:
      - ${COMPOSE_ROOT}/config/config.yml:/etc/assemblyline/config.yml:ro
    networks: [core]
    restart: on-failure
    command: python -m assemblyline_core.dispatching
    healthcheck:
      test: ["CMD", "bash", "-c", "if [[ ! `find /tmp/heartbeat -newermt '-30 seconds'` ]]; then false; fi"]
    depends_on:
      elasticsearch:
        condition: service_healthy

  # Ingester Processes
  ingester:
    image: ${REGISTRY}cccs/assemblyline-core:${AL_VERSION}
    env_file: [".env"]
    volumes:
      - ${COMPOSE_ROOT}/config/config.yml:/etc/assemblyline/config.yml:ro
    networks: [core]
    restart: on-failure
    command: python -m assemblyline_core.ingester
    healthcheck:
      test: ["CMD", "bash", "-c", "if [[ ! `find /tmp/heartbeat -newermt '-30 seconds'` ]]; then false; fi"]
    depends_on:
      elasticsearch:
        condition: service_healthy

  # Service server
  service_server:
    image: ${REGISTRY}cccs/assemblyline-service-server:${AL_VERSION}
    volumes:
      - ${COMPOSE_ROOT}/config/config.yml:/etc/assemblyline/config.yml:ro
    networks:
      - core
      - registration
    depends_on:
      elasticsearch:
        condition: service_healthy
      redis:
        condition: service_started
    env_file: [".env"]
    environment:
      SERVICE_API_KEY: ${SERVICE_API_KEY}
    restart: on-failure


  # UI
  ui:
    image: ${REGISTRY}cccs/assemblyline-ui:${AL_VERSION}
    env_file: [".env"]
    volumes:
      - ${COMPOSE_ROOT}/config/config.yml:/etc/assemblyline/config.yml:ro
    networks: [core, external]
    restart: on-failure
    depends_on:
      elasticsearch:
        condition: service_healthy

  # SocketIO Server
  socketio:
    image: ${REGISTRY}cccs/assemblyline-socketio:${AL_VERSION}
    env_file: [".env"]
    volumes:
      - ${COMPOSE_ROOT}/config/config.yml:/etc/assemblyline/config.yml:ro
    networks: [core]
    restart: on-failure
    depends_on:
      elasticsearch:
        condition: service_healthy

  # Assemblyline Frontend
  frontend:
    image: ${REGISTRY}cccs/assemblyline-ui-frontend:${AL_VERSION}
    env_file: [".env"]
    networks: [core]
    restart: on-failure

networks:
  core:
    internal: true
  external:
    internal: false
  registration:
    internal: true

volumes:
  datastore:
  filestore:
  redis:
  service_config:
